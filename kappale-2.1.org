* Ohje
  - kappaleen 2.1 alku sekä 2.1.1
    - /rational number/: rationaaliluku
    - /numerator/: osoittaja
    - /denominator/: nimittäjä
  - tehtävä 2.1
  - kappale 2.1.2
  - tehtävä 2.2
    - /(line) segment/: jana
  - kappale 2.1.3
  - tehtävä 2.4
* Tehtävä 2.1
** Vinkkejä
   - Osamäärän \(\frac{n}{d}\) merkin voi päätellä monella tavalla,
     esimerkiksi tulosta \(nd.\)
   - Schemessä on valmiiksi itseisarvoproseduuri ~abs~ sekä suurimman
     yhteisen tekijän antava proseduuri ~gcd~.
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes :results output
     (define (numer x) (car x))
     (define (denom x) (cdr x))
     (define (print-rat x)
       (newline)
       (display (numer x))
       (display "/")
       (display (denom x)))

     (define (make-rat n d)
       (let ((sign (if (>= (* n d) 0) 1 -1))
             (n (abs n))
             (d (abs d)))
         (let ((g (gcd n d)))
           (cons (* sign (/ n g))
                 (/ d g)))))

     (print-rat (make-rat 2 4))
     (print-rat (make-rat 2 -4))
     (print-rat (make-rat -2 4))
     (print-rat (make-rat -2 -4))
   #+END_SRC

   #+RESULTS[7faabcc5648a74a31b482f084e25eed3a1d5802b]:
   : 
   : 1/2
   : -1/2
   : -1/2
   : 1/2
* Tehtävä 2.2
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes :results output
     (define (print-point p)
       (newline)
       (display "(")
       (display (x-point p))
       (display ",")
       (display (y-point p))
       (display ")"))

     (define (make-point x y)
       (cons x y))

     (define (x-point p)
       (car p))

     (define (y-point p)
       (cdr p))

     ;; käy myös näin lyhyesti
     (define make-segment cons)
     (define start-segment car)
     (define end-segment cdr)

     (define (midpoint-segment s)
       (define (avg x y) (/ (+ x y) 2.0)) ; keskiarvo
       (let ((start (start-segment s))
             (end (end-segment s)))
         (make-point (avg (x-point start) (x-point end))
                     (avg (y-point start) (y-point end)))))

     (let ((p1 (make-point 2 5))
           (p2 (make-point 7 3)))
       (let ((s (make-segment p1 p2)))
         (print-point (midpoint-segment s))))
   #+END_SRC

   #+RESULTS[0e76b0d2f217a8abde128ce1bfb10a15aebfeb1f]:
   : 
   : (4.5,4.0)
* Tehtävä 2.4
  #+BEGIN_SRC scheme :exports code
    (car (cons x y))
    (car (lambda (m) (m x y)))
    ((lambda (m) (m x y)) (lambda (p q) p))
    ((lambda (p q) p) x y)
    x
  #+END_SRC
  Vastaavasti 
  #+BEGIN_SRC scheme :exports code
    (define (cdr z) 
      (z (lambda (p q) q)))
  #+END_SRC
