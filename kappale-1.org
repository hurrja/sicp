* Ohje
  1. lue kappaleet 1.1.1--1.1.6
  2. tee tehtävät 1.1--1.5
  3. lue kappale 1.1.7
  4. tee tehtävät 1.6 ja 1.7
* Tehtävä 1.1
  Evaluoi lausekkeet Scheme-tulkissa tarkistaaksesi vastauksesi.
* Tehtävä 1.2
** Ratkaisu
  #+BEGIN_SRC scheme :exports both
    (/
     (+ 5
        4
        (- 2 (- 3 (+ 6 (/ 4 5)))))
     (* 3
        (- 6 2)
        (- 2 7)))
  #+END_SRC

  #+RESULTS:
  : -37/150

* Tehtävä 1.3
** Vihjeitä
   1. Ratkaisussa on useita kohtia, joissa lasketaan kahden luvun
      neliöiden summa. Tätä varten voi olla hyvä muodostaa erillinen
      proseduuri.
   2. Miten voit merkitä matemaattisesti sitä, että \(x\) on pienin
      luvuista \(x,\) \(y\) ja \(z\)? Huomaa, että kolmen luvun
      joukossa voi olla myös kaksi tai peräti kolme
      \ldquo{}pienintä\rdquo lukua.
** Ratkaisu
  #+BEGIN_SRC scheme :exports both
    (define (square x) (* x x))
    (define (sum-squares x y) (+ (square x) (square y)))

    ; yksi ratkaisu
    (define (sum-sq-two-largest x y z)
      (cond ((and (<= x y) (<= x z)) (sum-squares y z)) ; onko x pienin?
            ((and (<= y x) (<= y z)) (sum-squares x z)) ; onko y pienin?      
            ((and (<= z x) (<= z y)) (sum-squares x y)))) ; onko z pienin?

    ; toinen, hiukan lyhyempi ratkaisu
    (define (sum-sq-two-largest-short x y z)
      (cond ((and (<= x y) (<= x z)) (sum-squares y z)) ; onko x pienin?
            ((<= y z) (sum-squares x z)) ; x ei pienin, onko y?
            (else (sum-squares x y)))) ; muuten z on pienin

    ; näistä kaikista pitäisi tulla sama vastaus
    (= (sum-sq-two-largest 2 1 -10)
       (sum-sq-two-largest -10 2 1)
       (sum-sq-two-largest-short 2 -10 -1))

  #+END_SRC

  #+RESULTS:
  : #t
  
* Tehtävä 1.4
** Ratkaisu
  Jos \(b > 0,\) niin proseduuri palauttaa arvon \(a + b.\) Muuten
  paluuarvo on \(a - b.\). Arvo on siis 
  \[ a + \Abs{b} = \begin{cases} a + b, & \text{kun \(b > 0\)}\\ a -
  b, & \text{muuten.} \end{cases} \]

* Tehtävä 1.5
** Ratkaisu
  - Jos lauseke evaluoidaan applikatiivisessa järjestyksessä, niin
    argumentti ~(p)~ evaluoidaan ennen proseduuria ~test~. Lausekkeen
    ~(p)~ evaluointi johtaa uudelleen lausekkeen ~(p)~ evaluointiin
    proseduurin ~p~ määritelmän takia. Ohjelma jää siis ikuiseen silmukkaan.
  - Jos lauseke evaluoidaan normaalijärjestyksessä, proseduuri ~test~
    palauttaa arvon 0, koska sen ensimmäisen argumentin arvo
    on 0 ja koska toista argumenttia ei tarvitse evaluoida.

* Tehtävä 1.6
** Ratkaisu
   Koska tulkki evaluoi lausekkeen applikatiivisessa järjestyksessä,
   proseduurin ~sqrt-iter~ sisällä ~new-if~ evaluoi aina molemmat
   argumentit. Niinpä ~sqrt-iter~ kutsuu itseään yhä uudestaan ja
   uudestaan, mikä johtaa ikuiseen silmukkaan.

* Tehtävä 1.7
** Alkuperäisen ohjelmakoodin toiminta pienillä ja suurilla arvoilla
*** Vihje
    Kokeile eri arvoja ja pyri selittämään havaintosi
*** Ratkaisu
    - Pienen luvun \(x\) ja huonon neliöjuuren arvion \(y\) neliön
      \(y^2\) erotus voi olla pienempi kuin 0,001. Esimerkiksi jos \(x
      = 0,0001\) ja \(y = 0,03,\) niin \(\sqrt{x} =\sqrt{0,0001} =
      0,01,\) mutta \(\Abs{y^2 - x} = \Abs{0,03^2 - 0,001^2} \approx
      0,0008 < 0,001.\) Näin ohjelma voi \ldquo{}tyytyä\rdquo kehnoon
      vastaukseen. Alla ohjelman antama tulos tässä tilanteessa.
    - Jos luku \(x\) on suuri, niin ohjelma ei tietokoneen äärellisen
      laskentatarkkuuden rajoissa välttämättä koskaan pääse riittävän
      lähelle luvun neliöjuurta vaan jää ikuiseen silmukkaan. Näin käy
      minun tietokoneessani esimerkiksi silloin, kun \(x = 10^{15}.\)
   
    #+BEGIN_SRC scheme :exports both
      (define (sqrt-iter guess x)
        (if (good-enough? guess x)
            guess
            (sqrt-iter (improve guess x) x)))

      (define (improve guess x)
        (average guess (/ x guess)))

      (define (average x y) 
        (/ (+ x y) 2))

      (define (good-enough? guess x)
        (< (abs (- (square guess) x)) 0.001))

      (define (square x) (* x x))

      (define (sqrt x)
        (sqrt-iter 1.0 x))

      (sqrt 0.0001)
    #+END_SRC

    #+RESULTS:
    : 0.03230844833048122
** Parannettu ohjelmakoodi
*** Vihje
    Uudessa ohjelmassa täytyy \ldquo{}kuljettaa mukana\rdquo edellistä
    arvausta, jolle täytyy myös alussa antaa jokin arvo (samaan tapaan
    kuin arvaukselle annetaan arvo 1,0).
*** Ratkaisu
    Alla esitetyssä ohjelmassa tyydytään arvaukseen, kun se muuttuu
    alle promillen edellisestä arvosta. Proseduuri ~list~ kytkee kaksi
    arvoa toisiinsa listaksi.
    #+BEGIN_SRC scheme :exports both
      (define (sqrt-iter guess prev-guess x)
        (if (good-enough? guess prev-guess)
            guess
            (sqrt-iter (improve guess x) guess x)))

      (define (improve guess x)
        (average guess (/ x guess)))

      (define (average x y) 
        (/ (+ x y) 2))

      (define (good-enough? guess prev-guess)
        (< (abs (/ (- guess prev-guess) guess)) 0.001))

      (define (square x) (* x x))

      (define (sqrt x)
        (sqrt-iter 1.0 0 x))

      (list (sqrt 0.0001) (sqrt 1000000000000000))
    #+END_SRC

    #+RESULTS:
    | 0.010000000025490743 | 31622779.27999515 |
