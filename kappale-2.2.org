#+LATEX_HEADER: \usepackage{forest}
* Ohje
  - tähän huomautus, että ~nil~ löytyy paketista ~sicp~
  - kappaleen 2.2 alku sekä kappale 2.2.1
    - Kun törmäät tekstiä lukiessasi seuraaviin tehtäviin, tee ne.
      - tehtävä 2.17
        - Tehtävässä ei kerrota, mitä proseduurin pitäisi tehdä, jos sille
          annetaan tyhjä lista ~nil~. Voit päättää itse, mitä tällöin
          tapahtuu.
      - tehtävä 2.18
      - tehtävä 2.20
        - /Pariteetti/ (/parity/) tarkoittaa sitä, että luku on joko
          parillinen tai pariton. Kahdella luvulla on sama pariteetti,
          jos molemmat ovat parillisia tai molemmat ovat parittomia.
        - Schemen proseduurit ~even?~ ja ~odd?~ testaavat parillisuuden ja
          parittomuuden.
        - Tehtävän voi ratkaista erittäin monella tavalla, kenties
          lyhyimmin käyttämällä Schemen valmista proseduuria ~filter~.
        - tehtävä 2.21
  - kappale 2.2.2
  - tehtävä 2.24
  - tehtävä 2.25
    - Huomaa, esimerkiksi ensimmäisen listan Scheme-lauseke on 
      #+BEGIN_SRC scheme :exports code
        (list 1 3 (list 5 7) 9)      
      #+END_SRC
* Tehtävä 2.17
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes
     (require sicp)
     (define (last-pair lst)
       (define (last-pair-iter elem lst)
         (if (null? lst)
             (list elem)
             (last-pair-iter (car lst) (cdr lst))))
       (last-pair-iter nil lst))

     (last-pair (list 1 2 3))
   #+END_SRC

   #+RESULTS[4231ce9fec6233ec6762fc3d008b37eceb5e6520]:
   | 3 |
* Tehtävä 2.18
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes
     (require sicp)
     (define (reverse lst)
       (define (reverse-iter lst result)
         (if (null? lst)
             result
             (reverse-iter (cdr lst) (cons (car lst) result))))
       (reverse-iter lst nil))

     (reverse (list 1 2 3 4))
   #+END_SRC

   #+RESULTS[06328e05b639be483c1b7f72c30f88619570b9c3]:
   | 4 | 3 | 2 | 1 |
* Tehtävä 2.20
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes
     (require sicp)
     (define (same-parity x . rest)
       (define (filter-parity lst test) ;; listan elementit tarkistetaan funktiolla test
         (if (null? lst) 
             nil
             (let ((first (car lst)) (rest (cdr lst)))
               (if (test first)
                   (cons first (filter-parity rest test))
                   (filter-parity rest test)))))
       (cons x (filter-parity rest (if (even? x) even? odd?))))


     (same-parity 1 2 3 4)
   #+END_SRC

   #+RESULTS[b0f650dbda16e9381f330866268a89e322cae10e]:
   | 1 | 3 |
** Lyhyt ratkaisu käyttämällä valmista proseduuria ~filter~
   #+BEGIN_SRC scheme :exports both :cache yes
     (define (same-parity x . rest)
       (cons x (filter (if (even? x) even? odd?) rest)))

     (same-parity 1 2 3 4)
   #+END_SRC

   #+RESULTS[6d772f33e43a31db3e68643c769f069556d6b1bd]:
   | 1 | 3 |
* Tehtävä 2.21
** Ratkaisu
*** Ensimmäinen 
    #+BEGIN_SRC scheme :exports both :cache yes
      (require sicp)
      (define (square x) (* x x))

      (define (square-list items)
        (if (null? items)
            nil
            (cons (square (car items)) (square-list (cdr items)))))

      (square-list (list 1 2 3 4))
    #+END_SRC

    #+RESULTS[67add2614406fd5aaf9046cf3fb7a13f195e3eaf]:
    | 1 | 4 | 9 | 16 |
*** Toinen
    #+BEGIN_SRC scheme :exports both :cache yes
      (define (square x) (* x x))

      (define (square-list items)
        (map square items))

      (square-list (list 1 2 3 4))
    #+END_SRC

    #+RESULTS[4823807aacb803ae087357cd4834d1f31f2a4a67]:
    | 1 | 4 | 9 | 16 |
* Tehtävä 2.24
** Ratkaisu
   Tässä vain puu, muu onnistunee muutenkin.
   #+BEGIN_CENTER
   \begin{forest}
   [(2 (3 4))
    [2]
    [(3 4)
     [3]
     [4]]]]
   \end{forest}
   #+END_CENTER
* Tehtävä 2.25
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes
     (car (cdr (car (cdr (cdr (list 1 3 (list 5 7) 9))))))
   #+END_SRC

   #+RESULTS[6f5c1dad35b373d09a2815ed757e4f5cdb166c07]:
   : 7

   #+BEGIN_SRC scheme :exports both :cache yes
     (car (car (list (list 7))))
   #+END_SRC

   #+RESULTS[5d29cd3a020640fee775a10d6dcc3d93de8e328f]:
   : 7

   #+BEGIN_SRC scheme :exports both :cache yes
     (car
      (cdr
       (car
        (cdr
         (car
          (cdr
           (car
            (cdr
             (car
              (cdr
               (car
                (cdr (list 1 (list 2 (list 3 (list 4 (list 5 (list 6 7))))))))))))))))))
   #+END_SRC

   #+RESULTS[85a9b591db3f2f19079a479801230788c8b1e3fb]:
   : 7
