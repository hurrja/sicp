* Ohje
  - tähän huomautus, että ~nil~ löytyy paketista ~sicp~
  - kappaleen 2.2 alku sekä kappale 2.2.1
  - tehtävä 2.17
    - Tehtävässä ei kerrota, mitä proseduurin pitäisi tehdä, jos sille
      annetaan tyhjä lista ~nil~. Voit päättää itse, mitä tällöin
      tapahtuu.
  - tehtävä 2.18
  - tehtävä 2.20
    - /Pariteetti/ (/parity/) tarkoittaa sitä, että luku on joko
      parillinen tai pariton.
    - Schemen proseduurit ~even?~ ja ~odd?~ testaavat parillisuuden ja
      parittomuuden.
* Tehtävä 2.17
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes
     (require sicp)
     (define (last-pair lst)
       (define (last-pair-iter elem lst)
         (if (null? lst)
             (list elem)
             (last-pair-iter (car lst) (cdr lst))))
       (last-pair-iter nil lst))

     (last-pair (list 1 2 3))
   #+END_SRC

   #+RESULTS[4231ce9fec6233ec6762fc3d008b37eceb5e6520]:
   | 3 |
* Tehtävä 2.18
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes
     (require sicp)
     (define (reverse lst)
       (define (reverse-iter lst result)
         (if (null? lst)
             result
             (reverse-iter (cdr lst) (cons (car lst) result))))
       (reverse-iter lst nil))

     (reverse (list 1 2 3 4))
   #+END_SRC

   #+RESULTS[06328e05b639be483c1b7f72c30f88619570b9c3]:
   | 4 | 3 | 2 | 1 |
* Tehtävä 2.20
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes
     (require sicp)
     (define (same-parity x . rest)
       (define (filter-parity lst test) ;; listan elementit tarkistetaan funktiolla test
         (if (null? lst) 
             nil
             (let ((first (car lst)) (rest (cdr lst)))
               (if (test first)
                   (cons first (filter-parity rest test))
                   (filter-parity rest test)))))
       (cons x (filter-parity rest (if (even? x) even? odd?))))


     (same-parity 1 2 3 4)
   #+END_SRC

   #+RESULTS[b0f650dbda16e9381f330866268a89e322cae10e]:
   | 1 | 3 |
