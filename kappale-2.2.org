#+LATEX_HEADER: \usepackage{forest}
* Ohje
  - tähän huomautus, että ~nil~ löytyy paketista ~sicp~
  - kappaleen 2.2 alku sekä kappale 2.2.1
    - Kun törmäät tekstiä lukiessasi seuraaviin tehtäviin, tee ne.
      - tehtävä 2.17
        - Tehtävässä ei kerrota, mitä proseduurin pitäisi tehdä, jos sille
          annetaan tyhjä lista ~nil~. Voit päättää itse, mitä tällöin
          tapahtuu.
      - tehtävä 2.18
      - tehtävä 2.20
        - /Pariteetti/ (/parity/) tarkoittaa sitä, että luku on joko
          parillinen tai pariton. Kahdella luvulla on sama pariteetti,
          jos molemmat ovat parillisia tai molemmat ovat parittomia.
        - Schemen proseduurit ~even?~ ja ~odd?~ testaavat parillisuuden ja
          parittomuuden.
        - Tehtävän voi ratkaista erittäin monella tavalla, kenties
          lyhyimmin käyttämällä Schemen valmista proseduuria ~filter~.
        - tehtävä 2.21
  - kappale 2.2.2
    - Kun törmäät tekstiä lukiessasi seuraaviin tehtäviin, tee ne.
      - tehtävä 2.24
      - tehtävä 2.25
        - Huomaa, esimerkiksi ensimmäisen listan Scheme-lauseke on 
          #+BEGIN_SRC scheme :exports code
            (list 1 3 (list 5 7) 9)      
          #+END_SRC
      - tehtävä 2.26 (tarkista tulkilla)
      - tehtävä 2.27
      - \star tehtävä 2.28
      - tehtävä 2.30
      - tehtävä 2.31
  - kappale 2.2.3
  - tehtävä 2.33
  - tehtävä 2.34
  - tehtävä 2.35
    - Tehtävässä saa käyttää proseduuria ~fringe~ (joka on siis sama
      kuin proseduuri ~fringe~).
* Tehtävä 2.17
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes :results verbatim
     (define nil (list))
     (define (last-pair lst)
       (define (last-pair-iter elem lst)
         (if (null? lst)
             (list elem)
             (last-pair-iter (car lst) (cdr lst))))
       (last-pair-iter nil lst))

     (last-pair (list 1 2 3))
   #+END_SRC

   #+RESULTS[1507105e1dbe98519527f8d9b8a70d03dd704da0]:
   : (3)

* Tehtävä 2.18
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes :results verbatim
     (define nil (list))
     (define (reverse lst)
       (define (reverse-iter lst result)
         (if (null? lst)
             result
             (reverse-iter (cdr lst) (cons (car lst) result))))
       (reverse-iter lst nil))

     (reverse (list 1 2 3 4))
   #+END_SRC

   #+RESULTS[a9aaa1a2a8d9b4354aae2ebd15f11f7bea2ec2f3]:
   : (4 3 2 1)

* Tehtävä 2.20
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes :results verbatim
     (define nil (list))
     (define (same-parity x . rest)
       (define (filter-parity lst test) ;; listan elementit tarkistetaan funktiolla test
         (if (null? lst) 
             nil
             (let ((first (car lst)) (rest (cdr lst)))
               (if (test first)
                   (cons first (filter-parity rest test))
                   (filter-parity rest test)))))
       (cons x (filter-parity rest (if (even? x) even? odd?))))


     (same-parity 1 2 3 4)
   #+END_SRC

   #+RESULTS[be057c15cfb249f10ff822afac2200fa7cd99161]:
   : (1 3)

** Lyhyt ratkaisu käyttämällä valmista proseduuria ~filter~
   #+BEGIN_SRC scheme :exports both :cache yes :results verbatim
     (define (same-parity x . rest)
       (cons x (filter (if (even? x) even? odd?) rest)))

     (same-parity 1 2 3 4)
   #+END_SRC

   #+RESULTS[7a63afa30cbf6ddb151366667c5dc6e5b5046b51]:
   : (1 3)

* Tehtävä 2.21
** Ratkaisu
*** Ensimmäinen 
    #+BEGIN_SRC scheme :exports both :cache yes :results verbatim
      (define nil (list))
      (define (square x) (* x x))

      (define (square-list items)
        (if (null? items)
            nil
            (cons (square (car items)) (square-list (cdr items)))))

      (square-list (list 1 2 3 4))
    #+END_SRC

    #+RESULTS[8313ec474b3646dad8afd19fd858cd4ce8aaa67e]:
    : (1 4 9 16)

*** Toinen
    #+BEGIN_SRC scheme :exports both :cache yes :results verbatim
      (define (square x) (* x x))

      (define (square-list items)
        (map square items))

      (square-list (list 1 2 3 4))
    #+END_SRC

    #+RESULTS[31b2418988abe1aec60b8037207885bb5fa64bfc]:
    : (1 4 9 16)

* Tehtävä 2.24
** Ratkaisu
   Tässä vain puu, muu onnistunee muutenkin.
   #+BEGIN_CENTER
   \begin{forest}
   [(2 (3 4))
    [2]
    [(3 4)
     [3]
     [4]]]]
   \end{forest}
   #+END_CENTER
* Tehtävä 2.25
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes
     (car (cdr (car (cdr (cdr (list 1 3 (list 5 7) 9))))))
   #+END_SRC

   #+RESULTS[6f5c1dad35b373d09a2815ed757e4f5cdb166c07]:
   : 7

   #+BEGIN_SRC scheme :exports both :cache yes
     (car (car (list (list 7))))
   #+END_SRC

   #+RESULTS[5d29cd3a020640fee775a10d6dcc3d93de8e328f]:
   : 7

   #+BEGIN_SRC scheme :exports both :cache yes
     (car
      (cdr
       (car
        (cdr
         (car
          (cdr
           (car
            (cdr
             (car
              (cdr
               (car
                (cdr (list 1 (list 2 (list 3 (list 4 (list 5 (list 6 7))))))))))))))))))
   #+END_SRC

   #+RESULTS[85a9b591db3f2f19079a479801230788c8b1e3fb]:
   : 7
* Tehtävä 2.27
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :results value verbatim
     ;; (print-mpair-curly-braces false) -- estää {} paketin sicp kanssa
     (define nil (list))
     (define (deep-reverse lst)
       (define (deep-iter lst result)
         (if (null? lst)
             result
             (let ((first (car lst)) (rest (cdr lst)))
               (deep-iter rest
                          (cons (if
                                 (pair? first)
                                 (deep-reverse first)
                                 first)
                                result)))))
       (deep-iter lst nil))

     (deep-reverse (list (list 1 2 3 4) (list (list 5 6) 7 8)))
   #+END_SRC

   #+RESULTS:
   : ((8 7 (6 5)) (4 3 2 1))

* Tehtävä 2.28
** Ratkaisu
   Tässä ratkaisussa ~fringe~ palauttaa aina listan, myös
   yksittäisille alkioille. Tällöin listan osien yhdistäminen onnistuu
   rekursioaskeleen jälkeen aina proseduurilla ~append~.
   #+BEGIN_SRC scheme :exports both :cache yes :results verbatim
     (define nil (list))
     (define (fringe lst)
       (cond ((null? lst) nil)
             ((not (pair? lst)) (list lst))
             (else (append (fringe (car lst)) (fringe (cdr lst))))))

     (let ((x (list (list 1 2) (list 3 4))))
       (list (fringe x) (fringe (list x x))))
   #+END_SRC

   #+RESULTS[588027f78b1922fc30b9b09fa9de2cefabb31f04]:
   : ((1 2 3 4) (1 2 3 4 1 2 3 4))

* Tehtävä 2.30
** Ratkaisu
*** Ilman proseduuria ~map~
    #+BEGIN_SRC scheme :exports both :cache yes :results verbatim
      (define nil (list))
      (define (square x) (* x x))

      (define (square-tree tree)
        (cond ((null? tree) nil)
              ((not (pair? tree)) (square tree))
              (else (cons (square-tree (car tree))
                          (square-tree (cdr tree))))))

      (square-tree
       (list 1
             (list 2 (list 3 4) 5)
             (list 6 7)))
    #+END_SRC

    #+RESULTS[6e428181b4bcb50ab51bf1e8e6df7c4c13e5ce82]:
    : (1 (4 (9 16) 25) (36 49))

*** Ja käytössä ~map~
    #+BEGIN_SRC scheme :exports both :cache yes :results verbatim
      (define (square x) (* x x))

      (define (square-tree tree)
        (map (lambda (sub-tree)
               (if (pair? sub-tree)
                   (square-tree sub-tree)
                   (square sub-tree)))
             tree))

      (square-tree
       (list 1
             (list 2 (list 3 4) 5)
             (list 6 7)))
    #+END_SRC

    #+RESULTS[cf7faeb80595443c98d9176cd2814f933d8eca65]:
    : (1 (4 (9 16) 25) (36 49))

* Tehtävä 2.31
** Ratkaisu
    #+BEGIN_SRC scheme :exports both :cache yes :results verbatim
      (define (square x) (* x x))

      (define (tree-map proc tree)
        (map (lambda (sub-tree)
               (if (pair? sub-tree)
                   (tree-map proc sub-tree)
                   (proc sub-tree)))
             tree))

      (define (square-tree tree)
        (tree-map square tree))

      (square-tree
       (list 1
             (list 2 (list 3 4) 5)
             (list 6 7)))
    #+END_SRC

    #+RESULTS[5890d0fe81d7d16b4bc448834e8dd80e86adc8c8]:
    : (1 (4 (9 16) 25) (36 49))
* Tehtävä 2.33
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes :results verbatim
     (define nil (list))
     (define (accumulate op initial sequence)
       (if (null? sequence)
           initial
           (op (car sequence)
               (accumulate op 
                           initial 
                           (cdr sequence)))))

     (define (map p sequence)
       (accumulate (lambda (x y) (cons (p x) y)) 
                   nil sequence))

     (define (append seq1 seq2)
       (accumulate cons seq2 seq1))

     (define (length sequence)
       (accumulate (lambda (x y) (+ y 1)) 0 sequence))

     (let ((l (list 1 2 3 4)) (t (list 7 8 9 10)))
       (list (map (lambda (x) (* x 2)) l)
             (append l t)
             (length t)))
   #+END_SRC

   #+RESULTS[975a5c59794a413b6cad5abf8bc14c38c7ebd1bc]:
   : ((2 4 6 8) (1 2 3 4 7 8 9 10) 4)
* Tehtävä 2.34
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes :results verbatim
     (define nil (list))

     (define (accumulate op initial sequence)
       (if (null? sequence)
           initial
           (op (car sequence)
               (accumulate op 
                           initial 
                           (cdr sequence)))))

     (define 
       (horner-eval x coefficient-sequence)
       (accumulate 
        (lambda (this-coeff higher-terms)
          (+ this-coeff (* x higher-terms)))
        0
        coefficient-sequence))

     (horner-eval 2 (list 1 3 0 5 0 1))
   #+END_SRC

   #+RESULTS[af391f349ae2ba9e8b7f0131438afdf29465c097]:
   : 79
* Tehtävä 2.35
** Ratkaisu
   #+begin_src scheme :exports both :cache yes :results verbatim
     (define nil (list))

     (define (fringe lst)
       (cond ((null? lst) nil)
             ((not (pair? lst)) (list lst))
             (else (append (fringe (car lst)) (fringe (cdr lst))))))

     (define (accumulate op initial sequence)
       (if (null? sequence)
           initial
           (op (car sequence)
               (accumulate op 
                           initial 
                           (cdr sequence)))))

     (define (count-leaves t)
       (accumulate + 0 (map (lambda (x) 1) (fringe t))))

     (let ((x (cons (list 1 2) (list 3 4))))
       (count-leaves x))
   #+end_src

   #+RESULTS[fe615bcc0822644c25ba652f98da8442662605a9]:
   : 4
