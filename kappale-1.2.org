* Ohje
  Mikäli käytät racket-tulkkia, tässä kappaleessa käytetyt proseduurit
  ~inc~ ja ~dec~ täytyy ottaa käyttöön seuraavasti:
  1. asenna paketti ~sicp~
  2. kirjoita kunkin ratkaisun ensimmäiseksi riviksi
     #+BEGIN_SRC scheme
     (require sicp)
     #+END_SRC

  Tämän kappaleen suositellut luettavat osat ja tehtävät ovat
  1. kappale 1.2.1
  2. tehtävä 1.9
  3. \star tehtävä 1.10
  4. kappale 1.2.2
     - 
        #+BEGIN_QUOTE
        On the other hand, the space required grows only linearly with
        the input, because we need keep track only of which nodes are
        above us in the tree at any point in the computation. In
        general, the number of steps required by a tree-recursive
        process will be proportional to the number of nodes in the
        tree, while the space required will be proportional to the
        maximum depth of the tree.
        #+END_QUOTE
        Tämä tarkoittaa sitä, että laskettaessa esimerkiksi lausekkeen
        ~(fib 5)~ arvoa tietokoneen muistiin täytyy tietyllä hetkellä
        tallentaa korkeintaan 5 yhtäaikaista funktiokutsua.
        Laskettaessa ~(fib 5)~ ollaan korkeintaan neljän askeleen
        päässä puun juuresta kuvassa 1.5 (vasemmanpuoleisin
        haara). Tällöin ohjelmassa on yhtä aikaa suoritettavana
        korkeintaan viisi funktiokutsua: ~(fib 5)~, ~(fib 4)~, ~(fib
        3)~, ~(fib 2)~ sekä ~(fib 1)~. Tieto tästä täytyy pitää
        tietokoneen muistissa, koska lausekkeen ~(fib 1)~ arvo
        tarvitaan lausekkeen ~(fib 2)~ laskemisessa jne.
     - @@latex:
       \newcommand{\Fib}[1]{\operatorname{Fib}\left(#1\right)}@@
       #+BEGIN_QUOTE
       It is not hard to show that, after applying this transformation
       \(n\) times, \(a\) and \(b\) will be equal, respectively, to
       \(\Fib{n+1}\) and \(\Fib{n}.\)
       #+END_QUOTE
       Osoitetaan. Alussa \(a = \Fib{1}\) ja \(b = \Fib{0}.\)
       Ensimmäisen iteraation jälkeen 
       \begin{align*}
       a &= \Fib{1} + \Fib{0} = \Fib{2}\\
       b &= \Fib{1}.
       \end{align*}
       Toisen iteraation jälkeen
       \begin{align*}
       a &= \Fib{2} + \Fib{1} = \Fib{3}\\
       b &= \Fib{2}.
       \end{align*}
       Ja niin edelleen. (Tarkemman todistuksen voi tehdä induktiolla.)
     - Sana /denomination/ tarkoittaa rahan arvoa.
  5. tehtävä 1.11
  6. tehtävä 1.12
* Tehtävä 1.9
** Ratkaisu
   - Ensimmäinen version tuottama prosessi on rekursiivinen.
     #+BEGIN_SRC scheme :exports both :cache yes
       (require sicp)
       (define (+ a b)
         (if (= a 0) 
             b 
             (inc (+ (dec a) b))))

       (+ 4 5)
     #+END_SRC

     #+RESULTS[1c3c088676acfbb56ce4fef47cac3993e04829db]:
     : 9

     Prosessi on seuraava:
     #+BEGIN_SRC scheme :exports code
       (+ 4 5)
       (inc (+ 3 5))
       (inc (inc (+ 2 5)))
       (inc (inc (inc (+ 1 5))))
       (inc (inc (inc (inc (+ 0 5)))))
       (inc (inc (inc (inc 5))))
       (inc (inc (inc 6)))
       (inc (inc 7))
       (inc 8)
       9
     #+END_SRC

   - Toisesta tulee iteratiivinen prosessi.
     #+BEGIN_SRC scheme :exports both :cache yes
       (require sicp)
       (define (+ a b)
         (if (= a 0) 
             b 
             (+ (dec a) (inc b))))

       (+ 4 5)
     #+END_SRC

     #+RESULTS[5e8433b7b306bf320460ef8abe88af1dc627ca2b]:
     : 9

     Prosessi on seuraava:
     #+BEGIN_SRC scheme :exports code
       (+ 4 5)
       (+ 3 6)
       (+ 2 7)
       (+ 1 8)
       (+ 0 9)
       9
     #+END_SRC
* Tehtävä 1.10
** Vihjeitä
   - Kysytyt funktion \(A\) arvot voi laskea suoraan tulkilla.
   - Funktion \(f(n)\) lausekkeen voi määrittää suoraan
     sijoitusmallilla yhdellä askeleella.
   - Osoita ensin sijoitusmallilla sekä funktioiden \(f\) ja \(g\)
     avulla, että \(g(n) = 2\cdot g(n-1).\) Mitä on \(g(1)\)?
   - Osoita ensin sijoitusmallilla sekä funktioiden \(g\) ja \(h\)
     avulla, että \(h(n) = 2^{h(n-1)}.\)
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes
     (define (A x y)
       (cond ((= y 0) 0)
             ((= x 0) (* 2 y))
             ((= y 1) 2)
             (else (A (- x 1)
                      (A x (- y 1))))))

     (define (f n) (A 0 n))
     (define (g n) (A 1 n))
     (define (h n) (A 2 n))

     (list (A 1 10) (A 2 4) (A 3 3))
   #+END_SRC

   #+RESULTS[a4735632561469282b6639f82f9a62f94e58fb80]:
   | 1024 | 65536 | 65536 |

   Sijoitusmallilla saadaan suoraan, että \[ f(n) = 2n. \]
   Samoin sijoitusmallilla saadaan, että 
   \begin{align*}
   g(n) &= A(1, n)\\
   &= A(0, A(1, n-1))\\
   &= f(A(1, n-1))\\
   &= 2\cdot A(1, n-1)\\
   &= 2\cdot g(n-1)\\ 
   & = 2^2\cdot g(n-2) = \cdots = 2^{n-1}\cdot g(1) = 2^{n-1}\cdot 2 = 2^n.
   \end{align*}
   Vastaavasti
   \begin{align*}
   h(n) &= A (2, n)\\
   &= A (1, A(2, n-1))\\
   &= g (A(2, n-1))\\
   &= 2^{A(2, n-1)}\\
   &= 2^{h(n-1)}\\
   &= 2^{2^{h(n-2)}} = \cdots = \underbrace{2^{2^{{\cdot}^{{\cdot}^{{\cdot}^2}}}}}_{\text{$n$ kpl}}.
   \end{align*}
* Tehtävä 1.11
** Vinkkejä
   - Huomaa, että \(f\) on määritelty kaikille luonnolliselle
     luvuille, myös luvulle 0, koska \[ f(3) = f(2) + 2f(1) + 3f(0).\]
   - Rekursiivisen prosessin ratkaisu on suoraviivainen.
   - Iteratiivisen prosessin ratkaisuun kannattaa hakea ideaa
     iteratiivisesta Fibonaccin ratkaisusta.
** Ratkaisu
   - rekursiivinen prosessi
     #+BEGIN_SRC scheme :exports both :cache yes
       (define (f n)
         (if (< n 3)
             n
             (+ (f (- n 1))
                (* 2 (f (- n 2)))
                (* 3 (f (- n 3))))))

       (f 5)
     #+END_SRC

     #+RESULTS[3af9a5ee9a44a5b4141e37b0b7567bb3af22a853]:
     : 25

   - iteratiivinen prosessi
     #+BEGIN_SRC scheme :exports both :cache yes
       (define (f n)
         (define (f-iter a b c count)
           (if (= count 0) c
               (f-iter
                (+ a (* b 2) (* c 3))
                a
                b
                (- count 1))))
         (f-iter 2 1 0 n))

       (f 5)
     #+END_SRC

     #+RESULTS[d8d094e10f17981fd58a96ffd8fbcf94ffd6918d]:
     : 25

* Tehtävä 1.12
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes
     (define (P r c)
       (cond ((or (<= c 0) (> c r)) 0)
             ((or (= 1 c) (= r c)) 1)
             (else (+ (P (- r 1) c) 
                      (P (- r 1) (- c 1))))))

     (list (P 4 1) (P 4 2) (P 4 3) (P 4 4))
   #+END_SRC

   #+RESULTS[0e0b83e73cd47e575161b58fc17703bdd893a249]:
   | 1 | 3 | 3 | 1 |
