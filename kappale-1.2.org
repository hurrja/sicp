#+LATEX_CLASS_OPTIONS: [a4paper, 12pt]
#+LATEX_HEADER: \usepackage{forest}
#+LATEX_HEADER: \usepackage[left=2.5cm,top=3cm,right=2.5cm,bottom=3cm,nohead,foot=2cm]{geometry}


* Ohje
  Mikäli käytät racket-tulkkia, tässä kappaleessa käytetyt proseduurit
  ~inc~ ja ~dec~ täytyy ottaa käyttöön seuraavasti:
  1. asenna paketti ~sicp~
  2. kirjoita kunkin ratkaisun ensimmäiseksi riviksi
     #+BEGIN_SRC scheme :exports code
     (require sicp)
     #+END_SRC

  Tämän kappaleen suositellut luettavat osat ja tehtävät ovat
  1. kappale 1.2.1
  2. tehtävä 1.9
  3. lisätehtävä
     - Kirjoita proseduuri ~gcd~ (/greatest common divisor/: suurin
       yhteinen tekijä) käyttämällä Eukleideen algoritmia:
       - Kokonais lukujen \(a \geq 0\) ja 0 suurin yhteinen tekijä on
         \(a.\)
       - Kun \(a \geq b,\) lukujen \(a\) ja \(b\) suurin yhteinen
         tekijä on sama kuin lukujen \(b\) ja \(r\) suurin yhteinen
         tekijä, missä \(r\) on jakolaskun \(a : b\) jakojäännös.
       Schemessä lauseke ~(remainder a b)~ antaa jakojäännöksen
       jakolaskussa \(a : b.\)
  4. \star tehtävä 1.10
  5. kappale 1.2.2
     - 
        #+BEGIN_QUOTE
        On the other hand, the space required grows only linearly with
        the input, because we need keep track only of which nodes are
        above us in the tree at any point in the computation. In
        general, the number of steps required by a tree-recursive
        process will be proportional to the number of nodes in the
        tree, while the space required will be proportional to the
        maximum depth of the tree.
        #+END_QUOTE
        Tämä tarkoittaa sitä, että laskettaessa esimerkiksi lausekkeen
        ~(fib 5)~ arvoa tietokoneen muistiin täytyy tietyllä hetkellä
        tallentaa korkeintaan 5 yhtäaikaista funktiokutsua.
        Laskettaessa ~(fib 5)~ ollaan korkeintaan neljän askeleen
        päässä puun juuresta kuvassa 1.5 (vasemmanpuoleisin
        haara). Tällöin ohjelmassa on yhtä aikaa suoritettavana
        korkeintaan viisi funktiokutsua: ~(fib 5)~, ~(fib 4)~, ~(fib
        3)~, ~(fib 2)~ sekä ~(fib 1)~. Tieto tästä täytyy pitää
        tietokoneen muistissa, koska lausekkeen ~(fib 1)~ arvo
        tarvitaan lausekkeen ~(fib 2)~ laskemisessa jne.
     - @@latex:
       \newcommand{\Fib}[1]{\operatorname{Fib}\left(#1\right)}@@
       #+BEGIN_QUOTE
       It is not hard to show that, after applying this transformation
       \(n\) times, \(a\) and \(b\) will be equal, respectively, to
       \(\Fib{n+1}\) and \(\Fib{n}.\)
       #+END_QUOTE
       Osoitetaan. Alussa \(a = \Fib{1}\) ja \(b = \Fib{0}.\)
       Ensimmäisen iteraation jälkeen 
       \begin{align*}
       a &= \Fib{1} + \Fib{0} = \Fib{2}\\
       b &= \Fib{1}.
       \end{align*}
       Toisen iteraation jälkeen
       \begin{align*}
       a &= \Fib{2} + \Fib{1} = \Fib{3}\\
       b &= \Fib{2}.
       \end{align*}
       Ja niin edelleen. (Tarkemman todistuksen voi tehdä induktiolla.)
     - Sana /denomination/ tarkoittaa rahan arvoa.
  6. tehtävä 1.11
  7. tehtävä 1.12
  8. kappale 1.2.3
     - \(\Theta(f(n))\) kuvaa suuruusluokkaa. Kaikki ensimmäisen
       asteen polynomifunktiot ovat \(\Theta(n),\) esimerkiksi \(n +
       5\) sekä \(9(n-2044)-773.\) Vastaavasti kaikki toisen asteen
       polynomifunktiot ovat \(\Theta(n^2).\)
     - Rekursiivisessa prosessissa tilatarpeen näkee puun syvyydestä
       ja laskuaskelien tarpeen puun solmujen lukumäärästä.
     - Tätä ei tekstissä sanota, mutta jos jokin proseduuri vaatii
       \(\Theta(n)\) askelta, ja proseduuri toistetaan \(\Theta(n)\)
       kertaa, niin kaiken kaikkiaan tarvittavien askelien määrä on
       \(\Theta(n^2),\) koska kahden ensimmäisten asteen polynomin
       tulo on toisen asteen polynomi.
  9. \star \star tehtävä 1.14 (kannattaa katsoa suoraan vinkkejä)
  10. kappale 1.2.4
      - 
        #+BEGIN_QUOTE
        Thus, the number of multiplications required for an exponent of
        \(n\) grows about as fast as the logarithm of \(n\) to the
        base 2. The process has \(\Theta(\log⁡ n)\) growth.
        #+END_QUOTE
        Ensinnäkin tässä puhutaan proseduurin vaatimista askelista eli
        aikavaativuudesta, ei tilasta. Toiseksi, logaritminen
        aikavaativuus voidaan perustella tarkemmin seuraavasti. Olkoon
        laskettu arvo \(b^n,\) ja oletetaan, että eksponentti \(n\)
        puolittuu kullakin askeleella. Siinä vaiheessa kun eksponentti
        on 1, ongelma (arvon laskeminen) on ratkaistu. Jos \(k\) on
        tarvittavien askelten määrä, niin eksponentti 1 saavutetaan kun
        \begin{align*}
        \left(\frac{1}{2}\right)^k n &= 1\\
        n &= 2^k\\
        k &= \log_2 n.
        \end{align*}
        Askelten määrä riippuu siis logaritmisesti eksponentin suuruudesta.
  11. tehtävä 1.17 (määrittele itse käytettävät apuproseduurit
      ~double~ ja ~halve~)
  12. \star tehtävä 1.16
  13. \star tehtävä 1.18
* Tehtävä 1.9
** Ratkaisu
   - Ensimmäinen version tuottama prosessi on rekursiivinen.
     #+BEGIN_SRC scheme :exports both :cache yes
       (require sicp)
       (define (+ a b)
         (if (= a 0) 
             b 
             (inc (+ (dec a) b))))

       (+ 4 5)
     #+END_SRC

     #+RESULTS[1c3c088676acfbb56ce4fef47cac3993e04829db]:
     : 9

     Prosessi on seuraava:
     #+BEGIN_SRC scheme :exports code
       (+ 4 5)
       (inc (+ 3 5))
       (inc (inc (+ 2 5)))
       (inc (inc (inc (+ 1 5))))
       (inc (inc (inc (inc (+ 0 5)))))
       (inc (inc (inc (inc 5))))
       (inc (inc (inc 6)))
       (inc (inc 7))
       (inc 8)
       9
     #+END_SRC

   - Toisesta tulee iteratiivinen prosessi.
     #+BEGIN_SRC scheme :exports both :cache yes
       (require sicp)
       (define (+ a b)
         (if (= a 0) 
             b 
             (+ (dec a) (inc b))))

       (+ 4 5)
     #+END_SRC

     #+RESULTS[5e8433b7b306bf320460ef8abe88af1dc627ca2b]:
     : 9

     Prosessi on seuraava:
     #+BEGIN_SRC scheme :exports code
       (+ 4 5)
       (+ 3 6)
       (+ 2 7)
       (+ 1 8)
       (+ 0 9)
       9
     #+END_SRC
* Lisätehtävä: ~gcd~
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes
     (define (gcd a b)
       (if (= b 0)
           a
           (gcd b (remainder a b))))

     (gcd (* 5 7 13) (* 11 13 19))
   #+END_SRC

   #+RESULTS[f3d6acd1a5c26dd575e7298989ea25ad063229ce]:
   : 13

* Tehtävä 1.10
** Vihjeitä
   - Kysytyt funktion \(A\) arvot voi laskea suoraan tulkilla.
   - Funktion \(f(n)\) lausekkeen voi määrittää suoraan
     sijoitusmallilla yhdellä askeleella.
   - Osoita ensin sijoitusmallilla sekä funktioiden \(f\) ja \(g\)
     avulla, että \(g(n) = 2\cdot g(n-1).\) Mitä on \(g(1)\)?
   - Osoita ensin sijoitusmallilla sekä funktioiden \(g\) ja \(h\)
     avulla, että \(h(n) = 2^{h(n-1)}.\)
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes
     (define (A x y)
       (cond ((= y 0) 0)
             ((= x 0) (* 2 y))
             ((= y 1) 2)
             (else (A (- x 1)
                      (A x (- y 1))))))

     (define (f n) (A 0 n))
     (define (g n) (A 1 n))
     (define (h n) (A 2 n))

     (list (A 1 10) (A 2 4) (A 3 3))
   #+END_SRC

   #+RESULTS[a4735632561469282b6639f82f9a62f94e58fb80]:
   | 1024 | 65536 | 65536 |

   Sijoitusmallilla saadaan suoraan, että \[ f(n) = 2n. \]
   Samoin sijoitusmallilla saadaan, että 
   \begin{align*}
   g(n) &= A(1, n)\\
   &= A(0, A(1, n-1))\\
   &= f(A(1, n-1))\\
   &= 2\cdot A(1, n-1)\\
   &= 2\cdot g(n-1)\\ 
   & = 2^2\cdot g(n-2) = \cdots = 2^{n-1}\cdot g(1) = 2^{n-1}\cdot 2 = 2^n.
   \end{align*}
   Vastaavasti
   \begin{align*}
   h(n) &= A (2, n)\\
   &= A (1, A(2, n-1))\\
   &= g (A(2, n-1))\\
   &= 2^{A(2, n-1)}\\
   &= 2^{h(n-1)}\\
   &= 2^{2^{h(n-2)}} = \cdots = \underbrace{2^{2^{{\cdot}^{{\cdot}^{{\cdot}^2}}}}}_{\text{$n$ kpl}}.
   \end{align*}
* Tehtävä 1.11
** Vinkkejä
   - Huomaa, että \(f\) on määritelty kaikille luonnolliselle
     luvuille, myös luvulle 0, koska \[ f(3) = f(2) + 2f(1) + 3f(0).\]
   - Rekursiivisen prosessin ratkaisu on suoraviivainen.
   - Iteratiivisen prosessin ratkaisuun kannattaa hakea ideaa
     iteratiivisesta Fibonaccin ratkaisusta.
** Ratkaisu
   - rekursiivinen prosessi
     #+BEGIN_SRC scheme :exports both :cache yes
       (define (f n)
         (if (< n 3)
             n
             (+ (f (- n 1))
                (* 2 (f (- n 2)))
                (* 3 (f (- n 3))))))

       (f 5)
     #+END_SRC

     #+RESULTS[3af9a5ee9a44a5b4141e37b0b7567bb3af22a853]:
     : 25

   - iteratiivinen prosessi
     #+BEGIN_SRC scheme :exports both :cache yes
       (define (f n)
         (define (f-iter a b c count)
           (if (= count 0) c
               (f-iter
                (+ a (* b 2) (* c 3))
                a
                b
                (- count 1))))
         (f-iter 2 1 0 n))

       (f 5)
     #+END_SRC

     #+RESULTS[d8d094e10f17981fd58a96ffd8fbcf94ffd6918d]:
     : 25

* Tehtävä 1.12
** Vinkki
   Tehtävässä ei sanota, mitä parametreja proseduurin pitäisi
   saada. Selkeä vaihtoehto on numeroida Pascalin kolmion luvut rivin
   ja sarakkeen mukaan. Jos proseduurin nimi on ~P~, niin tällöin
   voidaan muodostaa seuraava taulukko, josta voi päätellä proseduurin
   ~P~ määrittelyn.
   | rivi / sarake | 1             | 2             | 3             | 4             |
   |---------------+---------------+---------------+---------------+---------------|
   |             / | <             |               |               |               |
   |               | <c>           | <c>           | <c>           | <c>           |
   |             1 | ~(P 1 1)~ = 1 |               |               |               |
   |             2 | ~(P 2 1)~ = 1 | ~(P 2 2)~ = 1 |               |               |
   |             3 | ~(P 3 1)~ = 1 | ~(P 3 2)~ = 2 | ~(P 3 3)~ = 1 |               |
   |             4 | ~(P 4 1)~ = 1 | ~(P 4 2)~ = 3 | ~(P 4 3)~ = 3 | ~(P 4 4)~ = 1 |
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes
     (define (P r c)
       (if (or (= c 1) (= c r))
           1
           (+ (P (- r 1) c) 
              (P (- r 1) (- c 1)))))

     (list (P 4 1) (P 4 2) (P 4 3) (P 4 4))
   #+END_SRC

   #+RESULTS[aa7bf4b8da2633409ec81b749e945d03835e3d36]:
   | 1 | 3 | 3 | 1 |

* Tehtävä 1.14
** Vinkkejä
   - Puun piirtäminen on työlästä mutta erittäin hyödyllistä toista,
     paljon vaikeampaa osaa varten.
   - Alla \(n\) on rahasumma (ei erilaisten kolikoiden määrä).
   - Päättele piirtämästäsi puusta mikä on funktio \(f\) lausekkeessa
     \(\Theta(f(n))\) kun käytössä on vain yksi kolikkotyyppi (sentin
     kolikko).
   - Selitä miksi puuhun tulee noin \(\frac{n}{2}\) uutta haaraa,
     jossa käytössä on vain sentin kolikko, kun käyttöön otetaan
     toinen, viiden sentin kolikko. Päättele tästä funktion \(f\)
     lauseke.
   - Kuinka monta uutta \ldquo{}osaa\rdquo puuhun tulee, kun kolmas,
     kymmenen sentin kolikko otetaan käyttöön. Mikä on tällöin \(f\)?
   - Päättele tästä \(f,\) kun käytössä on viisi kolikkoa.
** Ratkaisu
   # apukoodi, jolla generoidaan puun kuvaus latexin forest-pakettia
   # varten
   #+BEGIN_SRC scheme :exports none :cache yes
    (require racket/format)

    (define (make-binary-tree node left right)
      (list node left right))
    (define (make-leaf node)
      (make-binary-tree node '() '()))
    (define (node btree)
      (car btree))
    (define (left btree)
      (cadr btree))
    (define (right btree)
      (caddr btree))

    (define (count-change amount)
      (cc amount 5))

    (define (cc amount kinds-of-coins)
                 (let ((children
                        (cond ((= amount 0) (cons '() (make-leaf 1)))
                              ((or (< amount 0) 
                                   (= kinds-of-coins 0)) 
                               (cons '() (make-leaf 0)))
                              (else 
                               (cons (cc amount (- kinds-of-coins 1))
                                     (cc (- amount (first-denomination 
                                                    kinds-of-coins))
                                         kinds-of-coins))))))
                   (make-binary-tree `(cc ,amount ,kinds-of-coins) 
                                     (car children)
                                     (cdr children))))


    (define (first-denomination kinds-of-coins)
      (cond ((= kinds-of-coins 1) 1)
            ((= kinds-of-coins 2) 5)
            ((= kinds-of-coins 3) 10)
            ((= kinds-of-coins 4) 25)
            ((= kinds-of-coins 5) 50)))

    (define (binary-tree-to-forest bt)
      (if (null? bt)
          ""
          (string-append
           "["
           (~a (node bt))
           (binary-tree-to-forest (left bt))
           (binary-tree-to-forest (right bt))
           "]")))
            
    (binary-tree-to-forest (count-change 11))
   #+END_SRC

   #+RESULTS[ce5047f7c33c68ad5c05b93aade6ac950b9397e5]:
   : [(cc 11 5)[(cc 11 4)[(cc 11 3)[(cc 11 2)[(cc 11 1)[(cc 11 0)[0]][(cc 10 1)[(cc 10 0)[0]][(cc 9 1)[(cc 9 0)[0]][(cc 8 1)[(cc 8 0)[0]][(cc 7 1)[(cc 7 0)[0]][(cc 6 1)[(cc 6 0)[0]][(cc 5 1)[(cc 5 0)[0]][(cc 4 1)[(cc 4 0)[0]][(cc 3 1)[(cc 3 0)[0]][(cc 2 1)[(cc 2 0)[0]][(cc 1 1)[(cc 1 0)[0]][(cc 0 1)[1]]]]]]]]]]]]][(cc 6 2)[(cc 6 1)[(cc 6 0)[0]][(cc 5 1)[(cc 5 0)[0]][(cc 4 1)[(cc 4 0)[0]][(cc 3 1)[(cc 3 0)[0]][(cc 2 1)[(cc 2 0)[0]][(cc 1 1)[(cc 1 0)[0]][(cc 0 1)[1]]]]]]]][(cc 1 2)[(cc 1 1)[(cc 1 0)[0]][(cc 0 1)[1]]][(cc -4 2)[0]]]]][(cc 1 3)[(cc 1 2)[(cc 1 1)[(cc 1 0)[0]][(cc 0 1)[1]]][(cc -4 2)[0]]][(cc -9 3)[0]]]][(cc -14 4)[0]]][(cc -39 5)[0]]]

  \begin{forest}
  for tree={font=\tiny, s sep-=5pt, draw, rounded corners},
  [(cc 11 5)[(cc 11 4)[(cc 11 3)[(cc 11 2)[(cc 11 1)[(cc 11 0)[0]][(cc 10 1)[(cc 10 0)[0]][(cc 9 1)[(cc 9 0)[0]][(cc 8 1)[(cc 8 0)[0]][(cc 7 1)[(cc 7 0)[0]][(cc 6 1)[(cc 6 0)[0]][(cc 5 1)[(cc 5 0)[0]][(cc 4 1)[(cc 4 0)[0]][(cc 3 1)[(cc 3 0)[0]][(cc 2 1)[(cc 2 0)[0]][(cc 1 1)[(cc 1 0)[0]][(cc 0 1)[1]]]]]]]]]]]]][(cc 6 2)[(cc 6 1)[(cc 6 0)[0]][(cc 5 1)[(cc 5 0)[0]][(cc 4 1)[(cc 4 0)[0]][(cc 3 1)[(cc 3 0)[0]][(cc 2 1)[(cc 2 0)[0]][(cc 1 1)[(cc 1 0)[0]][(cc 0 1)[1]]]]]]]][(cc 1 2)[(cc 1 1)[(cc 1 0)[0]][(cc 0 1)[1]]][(cc -4 2)[0]]]]][(cc 1 3)[(cc 1 2)[(cc 1 1)[(cc 1 0)[0]][(cc 0 1)[1]]][(cc -4 2)[0]]][(cc -9 3)[0]]]][(cc -14 4)[0]]][(cc -39 5)[0]]]
  \end{forest}

  - Ohjelman tarvitsema tila on puun korkeus eli \(\Theta(n).\)
  - Kun käytössä on vain sentin kolikko, ohjelman tarvitsemien
    laskenta-askelien määrä on \(\Theta(n).\) Esimerkiksi kuvan
    haarassa ~(c 11 1)~ on \(3\cdot 11 + 2\) solmua. Yleisesti ottaen
    solmujen määrä olisi \(3n + 2 = \Theta(n).\)
  - Kun käyttöön otetaan myös viiden sentin kolikko, puuhun tulee noin
    \(\frac{n}{5} = \Theta(n)\) uutta haaraa, joissa käytössä on vain
    sentin kolikko. Kuvassa nämä ovat ~(cc 6 1)~ sekä ~(cc 1
    1)~. Kussakin näissä on suuruusluokkaa \(n\) solmua. Tarkalleen
    ottaen haarassa ~(cc 6 1)~ on \(3\cdot(11-5)+2\) solmua, eli
    yleisesti vastaavassa haarassa olisi \(3(n-5)+2 = \Theta(n)\)
    solmua. Vastaavasti haarassa ~(cc 1 1)~ on \(3\cdot(11-2\cdot
    5)+2\) solmua, eli yleisesti vastaavassa haarassa olisi
    \(3(n-2\cdot 5)+2 = \Theta(n)\) solmua. Kussakin \(\Theta(n)\)
    haarassa on siis \(\Theta(n)\) solmua, joten kaiken kaikkiaan
    solmuja on \(\Theta(n^2)\).
  - Vastaavasti kun kymmenen sentin kolikko otetaan käyttöön, haaroja
    joissa käytössä on korkeintaan viiden sentin kolikko syntyy noin
    \(\frac{n}{10} = \Theta(n).\) Niinpä solmuja on \(\Theta(n^3).\)
  - Viidellä kolikolla solmuja on \(\Theta(n^5).\)
* Tehtävä 1.16
** Vinkkejä
   - Tehtävänanto on hyvin väljä. Ongelma voidaan ratkaista ainakin
     kahdella eri tavalla. Alla vinkkejä (mielestäni) helpompaan
     tapaan ilmaista \(ab^n\) toisessa muodossa \(a_\ast
     b_\ast^{n_\ast}\) siten, että seuraavalla askeleella eksponentti
     aina vähenee ja parillisen eksponentin tapauksessa
     puolittuu. Toisessa tapauksessa \(b\) pysyy muuttumattomana
     seuraavassa askeleessa, toisessa \(a\) pysyy muuttumattomana.
   - Pariton eksponentti:
     - Sievennä \(ab\cdot b^8.\)
     - Ilmaise vastaavassa muodossa \(ab^n,\) kun \(n\) on pariton.
   - Parillinen eksponentti
     - Sievennä \(a\cdot \left(b^5\right)^2.\)
     - Ilmaise vastaavassa muodossa \(ab^n,\) kun \(n\) on parillinen.

** Ratkaisuja
*** Mielestäni helpompi ratkaisu
    - Jos \(n\) on parillinen, niin \[ ab^n = a\cdot
      \left(\underbrace{b^2}_{\text{uusi
      \(b\)}}\right)^{\overbrace{\frac{n}{2}}^{\text{uusi \(n\)}}. \]
    - Jos \(n\) on pariton, niin \[ ab^n = \underbrace{ab}_{\text{uusi
      \(a\)}}\cdot b^\overbrace{{n-1}}^{\text{uusi \(n\)}}. \]
    #+BEGIN_SRC scheme :exports both :cache yes
      (define (square x) (* x x))
      (define (even? x) (= 0 (remainder x 2)))

      (define (fast-exp b n)
        (define (fast-exp-iter b n a)
          (cond ((= n 0) a)
                ((even? n) (fast-exp-iter (square b) (/ n 2) a))
                (else (fast-exp-iter b (- n 1) (* a b)))))
        (fast-exp-iter b n 1))

      (list (fast-exp 2 5) (fast-exp -3 4) (fast-exp -10 7))
    #+END_SRC

    #+RESULTS[ea1dde529c520ddc15d3f92528ce35f471ea5d6c]:
    | 32 | 81 | -10000000 |

*** Hieman toisenlainen
    - Jos \(n\) on parillinen, niin \[ ab^n =
      \underbrace{ab^2}_{\text{uusi \(a\)}}\cdot
      \left(\underbrace{b^2}_{\text{uusi
      \(b\)}}\right)^{\overbrace{\frac{n}{2} - 1}^{\text{uusi \(n\)}}. \]
    - Jos \(n\) on pariton, niin \[ ab^n = ab\cdot b^{n-1}. \]
    #+BEGIN_SRC scheme :exports both :cache yes
      (define (square x) (* x x))
      (define (even? x) (= 0 (remainder x 2)))

      (define (fast-exp b n)
        (define (fast-exp-iter b n a)
          (cond ((= n 0) a)
                ((even? n)
                 (fast-exp-iter
                  (square b)
                  (- (/ n 2) 1)
                  (* a (square b))))
                (else (fast-exp-iter b (- n 1) (* a b)))))
        (fast-exp-iter b n 1))

      (list (fast-exp 2 5) (fast-exp -3 4) (fast-exp -10 7))
    #+END_SRC

    #+RESULTS[31d391d1ad70a32993361d53a04c91caf2bcb5f9]:
    | 32 | 81 | -10000000 |
* Tehtävä 1.17
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes
     (define (double x) (+ x x))
     (define (halve x) (/ x 2))

     (define (* a b)
       (cond ((= 0 b) 0)
             ((even? b) (double (* a (halve b))))
             (else (+ a (* a (- b 1))))))

     (list (* 7 9) (* 12 12) (* 1 199) (* 0 5) (* 22 0))
   #+END_SRC

   #+RESULTS[7b18095abca50c513ddab10274e553bcb5a2257b]:
   | 63 | 144 | 199 | 0 | 0 |

* Tehtävä 1.18
** Ratkaisu
   Invariantiksi käy \(c + ab,\) missä alussa \(c = 0\) ja lopussa
   \(c\) on laskettava tulo. Kun \(b\) on parillinen, \[ c + ab = c +
   \underbrace{2a}_{\text{uusi \(a\)}}\cdot
   \underbrace{\frac{b}{2}}_{\text{uusi \(b\)}. \] Kun \(b\) on
   pariton, \[ c + ab = \underbrace{c + a}_{\text{uusi \(c\)}} +
   a\cdot\underbrace{(b-1)}_{\text{uusi \(b\)}}. \]
  
   #+BEGIN_SRC scheme :exports both :cache yes
     (define (double x) (+ x x))
     (define (halve x) (/ x 2))

     (define (* a b)
       (define (fast-mult a b c)
         (cond ((= b 0) c)
               ((even? b) (fast-mult (double a) (halve b) c))
               (else (fast-mult a (- b 1) (+ c a)))))
       (fast-mult a b 0))

     (list (* 7 9) (* 12 12) (* 1 199) (* 0 5) (* 22 0))
   #+END_SRC

   #+RESULTS[8fe9bf7000277bd4570e14988d525a978daa0cbd]:
   | 63 | 144 | 199 | 0 | 0 |
