* Ohje
  - kappale 1.3.1 siihen asti, kun tekstissä aletaan käsitellä
    integraaleja \(\int\)
  - tehtävä 1.31 osa 1
  - tehtävä 1.30
  - tehtävä 1.31 osa 2
  - tehtävä 1.32
  - kappale 1.3.2 (integraalia koskevan osan voi jättää huomiotta)
  - tehtävä 1.34
* Tehtävä 1.31 osa 1
** Vinkkejä
   - Summassa arvo on 0, kun \(a > b,\) tulossa vastaava arvo on...?
   - \[ \pi = 4\cdot\frac{2\cdot 4}{3\cdot 3} \cdot \frac{4\cdot
     6}{5\cdot 5} \cdot \frac{6\cdot 8}{7\cdot 7} \cdots \]
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes
     (define (product term a next b)
       (if (> a b)
           1
           (* (term a)
              (product term (next a) next b))))

     (define (identity x) x)
     (define (inc x) (+ x 1))
     (define (factorial n)
       (product identity 1 inc n))

     (define (pi-prod n)
       (define (pi-term n)
         (/ (* (- n 1.0) (+ n 1.0))
            (* n n)))
       (define (pi-next n) (+ n 2.0))
       (* 4 (product pi-term 3 pi-next n)))

     (list (factorial 5) (pi-prod 100))
   #+END_SRC

   #+RESULTS[dea476e74987cbabd46c1d33314026fb2254458f]:
   | 120 | 3.1573396892175642 |
* Tehtävä 1.30
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes
     (define (sum term a next b)
       (define (iter a result)
         (if (> a b)
             result
             (iter (next a) (+ result (term a)))))
       (iter a 0))

     (define (id x) x)
     (define (inc x) (+ x 1))
     (sum id 1 inc 10)
   #+END_SRC

   #+RESULTS[db8680979c4e10fba0e57c05806e32cfc194eba9]:
   : 55
* Tehtävä 1.31 osa 2
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes
     (define (product term a next b)
       (define (iter a result)
         (if (> a b)
             result
             (iter (next a) (* result (term a)))))
       (iter a 1))

     (define (identity x) x)
     (define (inc x) (+ x 1))
     (define (factorial n)
       (product identity 1 inc n))

     (factorial 5)
   #+END_SRC

   #+RESULTS[04ac406a1f2a26d1367389862d66ab51e513d73a]:
   : 120
* Tehtävä 1.32
** Ratkaisu
*** Ratkaisu, joka tuottaa rekursiivisen prosessin
    #+BEGIN_SRC scheme :exports both :cache yes
      (define (accumulate combiner null-value term a next b)
        (if (> a b)
            null-value
            (combiner (term a)
                      (accumulate combiner null-value term (next a) next b))))

      (define (sum term a next b)
        (accumulate + 0 term a next b))

      (define (product term a next b)
        (accumulate * 1 term a next b))

      (define (id x) x)
      (define (inc x) (+ x 1))

      (list (sum id 1 inc 10) (product id 1 inc 5))
    #+END_SRC

    #+RESULTS[3c6c7e2211684b09547c16b782f9ef98fcf92e56]:
    | 55 | 120 |
*** Ratkaisu, joka tuottaa iteratiivisen prosessin
    #+BEGIN_SRC scheme :exports both :cache yes
      (define (accumulate combiner null-value term a next b)
        (define (acc-iter a result)
          (if (> a b)
              result
              (acc-iter (next a) (combiner (term a) result))))
        (acc-iter a null-value))

      (define (sum term a next b)
        (accumulate + 0 term a next b))

      (define (product term a next b)
        (accumulate * 1 term a next b))

      (define (id x) x)
      (define (inc x) (+ x 1))

      (list (sum id 1 inc 10) (product id 1 inc 5))
    #+END_SRC

    #+RESULTS[479d343ae0b2bdb27f35380a1ecd7ea2d8544d01]:
    | 55 | 120 |
* Tehtävä 1.34
** Vinkki
   Käytä sijoitusmallia.
** Ratkaisu
   Sijoitusmallilla saadaan:
   #+BEGIN_SRC scheme :exports code
     (f f)
     (f 2)
     (2 2)
   #+END_SRC

   Tästä seuraa virhe, koska ~2~ ei ole proseduuri.
