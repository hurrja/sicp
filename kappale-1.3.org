* Ohje
  - kappale 1.3.1 siihen asti, kun tekstissä aletaan käsitellä
    integraaleja \(\int\)
  - tehtävä 1.31 osa 1
  - tehtävä 1.30
  - tehtävä 1.31 osa 2
  - tehtävä 1.32
  - kappale 1.3.2 (integraalia koskevan osan voi jättää huomiotta)
  - tehtävä 1.34
  - \ldquo{}Finding fixed points of functions\rdquo kappaleesta 1.3.3
    - Funktion \(f\) /kiintopiste/ (fixed point) on siis yhtälön \(x =
      f(x)\) ratkaisu.
  - tehtävä 1.35
  - tehtävä 1.37
  - kappale 1.3.4 otsikkoon \ldquo{}Newton's method asti\rdquo
  - tehtävä 1.41
  - tehtävä 1.42
  - tehtävä 1.43
* Tehtävä 1.31 osa 1
** Vinkkejä
   - Summassa arvo on 0, kun \(a > b,\) tulossa vastaava arvo on...?
   - \[ \pi = 4\cdot\frac{2\cdot 4}{3\cdot 3} \cdot \frac{4\cdot
     6}{5\cdot 5} \cdot \frac{6\cdot 8}{7\cdot 7} \cdots \]
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes
     (define (product term a next b)
       (if (> a b)
           1
           (* (term a)
              (product term (next a) next b))))

     (define (identity x) x)
     (define (inc x) (+ x 1))
     (define (factorial n)
       (product identity 1 inc n))

     (define (pi-prod n)
       (define (pi-term n)
         (/ (* (- n 1.0) (+ n 1.0))
            (* n n)))
       (define (pi-next n) (+ n 2.0))
       (* 4 (product pi-term 3 pi-next n)))

     (list (factorial 5) (pi-prod 100))
   #+END_SRC

   #+RESULTS[dea476e74987cbabd46c1d33314026fb2254458f]:
   | 120 | 3.1573396892175642 |
* Tehtävä 1.30
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes
     (define (sum term a next b)
       (define (iter a result)
         (if (> a b)
             result
             (iter (next a) (+ result (term a)))))
       (iter a 0))

     (define (id x) x)
     (define (inc x) (+ x 1))
     (sum id 1 inc 10)
   #+END_SRC

   #+RESULTS[db8680979c4e10fba0e57c05806e32cfc194eba9]:
   : 55
* Tehtävä 1.31 osa 2
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes
     (define (product term a next b)
       (define (iter a result)
         (if (> a b)
             result
             (iter (next a) (* result (term a)))))
       (iter a 1))

     (define (identity x) x)
     (define (inc x) (+ x 1))
     (define (factorial n)
       (product identity 1 inc n))

     (factorial 5)
   #+END_SRC

   #+RESULTS[04ac406a1f2a26d1367389862d66ab51e513d73a]:
   : 120
* Tehtävä 1.32
** Ratkaisu
*** Ratkaisu, joka tuottaa rekursiivisen prosessin
    #+BEGIN_SRC scheme :exports both :cache yes
      (define (accumulate combiner null-value term a next b)
        (if (> a b)
            null-value
            (combiner (term a)
                      (accumulate combiner null-value term (next a) next b))))

      (define (sum term a next b)
        (accumulate + 0 term a next b))

      (define (product term a next b)
        (accumulate * 1 term a next b))

      (define (id x) x)
      (define (inc x) (+ x 1))

      (list (sum id 1 inc 10) (product id 1 inc 5))
    #+END_SRC

    #+RESULTS[3c6c7e2211684b09547c16b782f9ef98fcf92e56]:
    | 55 | 120 |
*** Ratkaisu, joka tuottaa iteratiivisen prosessin
    #+BEGIN_SRC scheme :exports both :cache yes
      (define (accumulate combiner null-value term a next b)
        (define (acc-iter a result)
          (if (> a b)
              result
              (acc-iter (next a) (combiner (term a) result))))
        (acc-iter a null-value))

      (define (sum term a next b)
        (accumulate + 0 term a next b))

      (define (product term a next b)
        (accumulate * 1 term a next b))

      (define (id x) x)
      (define (inc x) (+ x 1))

      (list (sum id 1 inc 10) (product id 1 inc 5))
    #+END_SRC

    #+RESULTS[479d343ae0b2bdb27f35380a1ecd7ea2d8544d01]:
    | 55 | 120 |
* Tehtävä 1.34
** Vinkki
   Käytä sijoitusmallia.
** Ratkaisu
   Sijoitusmallilla saadaan:
   #+BEGIN_SRC scheme :exports code
     (f f)
     (f 2)
     (2 2)
   #+END_SRC

   Tästä seuraa virhe, koska ~2~ ei ole proseduuri.
* Tehtävä 1.35
** Ratkaisu
   Muunnoksen kiintopisteet ovat
   \begin{align*}
   x &= 1 + \frac{1}{x}\\
   x^2 &= x + 1\\
   x^2 - x - 1 &= 0\\
   x &= \frac{1\pm\sqrt{1+4}}{2} = \frac{1\pm\sqrt{5}}{2},
   \end{align*}
   joista toinen on \(\phi.\)
   #+BEGIN_SRC scheme :exports both :cache yes
     (define tolerance 0.00001)

     (define (fixed-point f first-guess)
       (define (close-enough? v1 v2)
         (< (abs (- v1 v2)) 
            tolerance))
       (define (try guess)
         (let ((next (f guess)))
           (if (close-enough? guess next)
               next
               (try next))))
       (try first-guess))

     (fixed-point (lambda (x) (+ 1 (/ 1.0 x))) 1)
   #+END_SRC

   #+RESULTS[e362d1599e5c052a4eb251bad3c8cf5fbb82f946]:
   : 1.6180327868852458
* Tehtävä 1.37
** Vinkkejä
   Itselleni ratkaisu oli helpointa ajatella siten, että
   - rekursiivinen prosessi muodostetaan ylhäältä alaspäin
     \(\frac{N_1}{D_1 + \cdots}\)
   - iteratiivinen prosessi muodostetaan alhaalta ylöspäin
     (ensimmäinen tulos on \(\frac{N_k}{D_k}.\)
** Ratkaisu
*** Rekursiivinen prosessi
    #+BEGIN_SRC scheme :exports both :cache yes
      (define (cont-frac n d k)
        (define (cf m)
          (/ (n m)
             (+ (d m) (if (= m k) 0 (cf (+ m 1))))))
        (cf 1))

      (let ((const-one (lambda (i) 1.0)))
        (/ 1.0 (cont-frac const-one const-one 20)))

    #+END_SRC

    #+RESULTS[988fb74c12338037a14db37c744cc35d929eed96]:
    : 1.6180339985218037
*** Iteratiivinen prosessi
    #+BEGIN_SRC scheme :exports both :cache yes
      (define (cont-frac n d k)
        (define (cf-iter k result)
          (if (= k 0) result
              (cf-iter (- k 1) (/ (n k) (+ (d k) result)))))
        (cf-iter k 0))

      (let ((const-one (lambda (i) 1.0)))
        (/ 1.0 (cont-frac const-one const-one 20)))

    #+END_SRC

    #+RESULTS[1a1f63a58a55d08f18008f7000ec2bc41817a807]:
    : 1.6180339985218037
* Tehtävä 1.41
** Ratkaisu
   Merkitään lausekkeessa ~((double (double double)) inc)~ proseduuria
   ~double~ lyhyesti merkillä ~d~ ja proseduuria ~inc~ merkillä
   ~i~. Lisäksi ~dd~ tarkoittaa proseduurin ~d~ kahta sisäkkäistä
   kutsua.
   #+BEGIN_SRC scheme :exports code
   ((d (d d)) i)
   ((d (lambda (x) (d (d x)))) i)
   ((d dd) i)
   (dddd i)
   (ddd ii)
   (dd iiii)
   (d iiiiiiii)
   (iiiiiiiiiiiiiiii)
   #+END_SRC
   Lauseke kasvattaa siis argumentin arvoa luvulla 16.
   #+BEGIN_SRC scheme :exports both :cache yes
     (define (double f)
       (lambda (x)
         (f (f x))))

     (define (inc x) (+ x 1))

     (list ((double inc) 1) (((double (double double)) inc) 5))
   #+END_SRC

   #+RESULTS[c2a5171d732198c7f74ec411ba4697cd6908c1af]:
   | 3 | 21 |
* Tehtävä 1.42
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes
     (define (square x) (* x x))
     (define (inc x) (+ x 1))

     (define (compose f g)
       (lambda (x)
         (f (g x))))

     ((compose square inc) 6)
   #+END_SRC

   #+RESULTS[e3e232adffce85b5216288554891cbfd7a3a6273]:
   : 49
* Tehtävä 1.43
** Ratkaisu
   #+BEGIN_SRC scheme :exports both :cache yes
     (define (square x) (* x x))

     (define (compose f g)
       (lambda (x)
         (f (g x))))

     (define (repeated f n)
       (if (= 1 n)
           f
           (compose f (repeated f (- n 1)))))

     ((repeated square 2) 5)
   #+END_SRC
